///////////////////////////////// Proyecto Procesadores Integrados /////////////////////////////////////////////////////////////////////////////
//////////////////// Control de Brazo robot // Brazo ////////////// By Arturo//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Objetivo: Este programa sirve para mover el Brazo Robot
 * Funcionamiento: Siguiendo las intrucciones del programa del mando, este programa recibira la informacion
 * necesaria para efectuar de manera precisa el movimiento del brazo y sus distintas funciones.
 * 
 * Posiciones de los Servos (mirando desde detras del brazo:
 *                      0             180         Centro
 *          Base      Derecha       Izquierda       90
 *          Hombro    Alante        Atras           90
 *          Codo      Atras         Alante          50
 *          M.Giro    Antihorario   Horario         30
 *          M.SB      Abajo         Arriba          110
 *          Pinza     Cerrado       Abierto         90
 * EEPROM: 
 *     Indices de memoria (indican si una memoria se esta usando)
 *          Direnccion: 0-2, contiene un 1 si la memoria se esta usando y 0 si no.
 *     Memoria 1 -> Direccion: 3-44
 *     Memoria 2 -> Direccion: 45-86
 *     Memoria 3 -> Direccion: 87-128
 * Conexiones:
 *              Servos                        HC 05                 Pila 9V
 *                    Base        -> 3          TXD -> 2               Positivo -> Vin
 *                    Hombro      -> 5          RXD -> R -> 4          Negativo -> Gnd
 *                    Codo        -> 6
 *                    Mu単eca Giro -> 9
 *                    Mu単eca S B  -> 10
 *                    Pinza       -> 11
 */
 
#include <SoftwareSerial.h>  //Biblioteca para BT
#include <Servo.h>           //Biblioteca para Servos
#include <EEPROM.h>          //Biblioteca para EEPROM

SoftwareSerial BTSerial(2, 4); // RX | TX

Servo SBase;    //Servomotor de la base
Servo SHombro;  //Servomotor del hombro
Servo SCodo;    //Servomotor del codo
Servo SMGiro;   //Servomotor de la mu単eca para giro
Servo SMSB;     //Servomotor de la mu単eca para subir y bajar
Servo SPinza;   //Servomotor de la pinza

bool salir;  //Condicion de salida de un modo
bool memoriaVacia[3]; //Indica que memorias estan vacias


byte posicion[7]={90,160,180,0,30,180,90}; //Posicion del brazo
byte posicionGuardar[6][7]={{0,0,0,0,0,0,60}, //Posicion guardada
                            {0,0,0,0,0,0,0},
                            {0,0,0,0,0,0,0},
                            {0,0,0,0,0,0,0},
                            {0,0,0,0,0,0,0},
                            {0,0,0,0,0,0,0}};
 
int state;   //Donde se guarda lo que se recibe por BT

byte const indiceMemoria[3]={3,45,87};  //Indica las direcciones de inicio de cada memoria en la EEPROM
const byte velNominal=60;  //Microsegundos entre los cada incremento de la posicion
const byte PosIn[6]={90,140,170,30,60,180}; //Posicion Inicial

void setup() 
{
  for(int i=0;i<3;i++) memoriaVacia[i]=EEPROM.read(i);  //Comprueba que memorias estan en uso
  
//Configuramos los servos a una posicion inicial conocida
  SBase.attach(3);
  SHombro.attach(5);
  SCodo.attach(6);
  SMGiro.attach(9);
  SMSB.attach(10);
  SPinza.attach(11);

//Iniciamos los servos en una posicion
  SBase.write(90);
  SHombro.write(160);
  SCodo.write(180);
  SMGiro.write(0);
  SMSB.write(30);
  SPinza.write(100);
  
  BTSerial.begin(9600);  //Comenzamos la conexion BT a una velocidad de 9600 Baudios
}
 
void loop()
{
  
  if (BTSerial.available()){  //Cuando reciba un numero:
    state=BTSerial.read();    //Guarda el numero recibido
    salir=false;
    switch (state-200){       //Se le resta 200 ya que los numeros de los modos se envian a partir del 200
      case 0: PosicionInicial();  break;  //Se ejecuta el modo de Posicion Inicial
      case 1: IniciarSecuencia(); break;  //Se ejecuta el submodo de Iniciar Secuencia
      case 2: GuardarSecuencia(); break;  //Se ejecuta el submodo de Guardar Secuencia
      case 3: ControlTotal();     break;  //Se ejecuta el modo de Control Total
      case 4: ControlManual();    break;  //Se ejecuta el modo de Control Manual
      case 5: PPT();              break;  //Se ejecuta el modo de Piedra Papel Tijera
      case 6: Reposo();           break;  //Se ejecuta el modo de Reposo 
      case 7: Bailar();           break;  //Se ejecuta el modo de Bailar
      case 8: Saludar();          break;  //Se ejecuta el modo de Saludar
      case 20:ReescribirSec();    break;  //Se ejecuta el submodo de Reescribir secuencia
      case 21:BorrarSec();        break;  //Se ejecuta el submodo de Borrar secuencia
      case 53:Espera();           break;  //Entra en espera por permanecer inactivo
      case 55:Desconectado();     break;  //Este caso se da si el brazo cree que esta conectado pero el mando esta buscando conectarse al brazo
    }
  }
}

void PosicionInicial(){ //Coloca el servo en la posicion Inicial
  moverServos(PosIn,velNominal);  //Mueve el servo a la posicion Inicial
  BTSerial.write(1);  //Comunica que ha terminado
}

void Bailar(){  //Realiza una secuencia alternando 2 subsecuencias con repeticiones aleatorias
  bool marca=0;
  byte azar;
  byte vector0[6]={70,180,180,0,0,0}; //Abajo derecha
  byte vector1[6]={70,100,100,30,80,180};   //Arriba derecha
  byte vector2[6]={110,180,180,60,0,0};    //Abajo izquierda
  byte vector3[6]={110,100,100,30,80,180};    //Arriba izquierda
  byte vector4[6]={90,90,50,30,110,180};    //Rock arriba
  byte vector5[6]={90,100,70,30,10,180};    //Rock abajo
  
  while(!salir){
    azar=1+millis()%5;  //Coge un numero al azar entre 1 y 5
    for(int i=0;i<azar;i++){
      if(BTSerial.available()) {  //Se se le comunica que pare, para
        salir=BTSerial.read();
        break;
      }
      if(!marca){ //Realiza la primera subsecuencia
        moverServos(vector0,80);
        moverServos(vector1,90);
        moverServos(vector2,80);
        moverServos(vector3,90);
      }
      if(marca){  //Realiza la segunda subsecuencia
        moverServos(vector4,60);
        moverServos(vector5,90);
        moverServos(vector4,60);
        moverServos(vector5,90);
      }
    }
  marca=!marca;
  }
  PosicionInicial();
}

void Saludar(){ //Realiza un movimiento parecida a un saludo
  byte vector0[6]={0,90,120,120,100,180}; //Mueve hacia un lado
  byte vector1[6]={0,90,0,120,100,180};   //Mueve hacia el otro

  for(int i=0; i<3;i++){
    moverServos(vector0,velNominal);
    moverServos(vector1,velNominal);
  }
  PosicionInicial();
}

void Reposo(){  //Tras alzarse, se queda abajo en letargo hasta que se le comunica que despierte
  byte vector0[6]={90,100,90,30,180,180}; //Se estira hacia arriba
  byte vector1[6]={90,80,170,30,0,180};   //Se inclina hacia abajo
  byte vector2[6]={90,30,170,30,0,180};   //Baja mas
  byte vector3[6]={90,140,170,30,60,0};   //Cierra la pinza y vuelve al inicio
//Letargo
  moverServos(vector0,velNominal);
  moverServos(vector1,50);
  moverServos(vector2,40);
  BTSerial.write(1);  //Comunica que ha terminado
  while (!salir)  //Mientras que no reciba que se ha pulsado el boton, se queda aqui
    if (BTSerial.available()) salir=BTSerial.read();
//Despierta
  moverServos(vector3,velNominal);
  moverServos(PosIn,90);
  BTSerial.write(1);
}

void PPT(){ //Realiza tres sacudidas seguidas del movimiento de piedra, papel o tijera
  byte aleatorio;
  byte vector0[6]={90,140,180,30,80,90}; //Echarse para alante
  byte vector1[6]={90,140,160,30,80,90};   //Echarse para atras
  byte piedra[6]={90,100,150,30,100,0}; //Piedra
  byte papel[6]={90,100,150,30,180,180}; //Papel
  byte tijera[6]={90,100,150,130,100,180}; //Tijera
  
  for(int i=0; i<3;i++){  //Se echa hacia atras y alante 3 veces, comunica cuando termina cada ciclo
    moverServos(vector1,70);
    moverServos(vector0,50);
    BTSerial.write(1);
  }
  aleatorio=1+millis()%3; //Crea un numero semialeatorio del 1 al 3
  BTSerial.write(aleatorio);  //Comunica el numero
  if(aleatorio==1) moverServos(piedra,95);  //Si es 1 sale piedra
  if(aleatorio==2) moverServos(papel,95);   //Si es 2 sale papel
  if(aleatorio==3) moverServos(tijera,95);  //Si es 3 sale tijera
  BTSerial.write(1);  //Comunica que ha terminado

  while (!salir)  if (BTSerial.available()) salir=BTSerial.read();
  salir=false;
  PosicionInicial();
}

void ControlManual(){ //Permite controlar la posicion de cada servo
  byte v=0; //Indice del servo que se esta utilizando

  while (!salir){   //Mientras que no reciba que se ha pulsado el boton, se queda aqui
     if (BTSerial.available()){
        state=BTSerial.read();
        if (state<181)  posicion[v]=state;  //Si el numero recibido es de 0 a 180 es una posicion
        else if (state==255) salir=true;    //Si se recibe el  255 es de salir del modo
        else v=state-181;                   //Sino es cambio de servo
//Mueve los servos
        SBase.write(posicion[0]);
        SHombro.write(posicion[1]);
        SCodo.write(posicion[2]);
        SMGiro.write(posicion[3]);
        SMSB.write(map(posicion[4],0,180,10,180));
        SPinza.write(map(posicion[5],0,180,40,100));
    }
  }
}

void ControlTotal(){  //Permite controlar la posicion de todos los servos simultaneamente
  byte vector[6];
//Movemos el brazo hasta la posicion que indique el control total
  for (int i=0;i<6;i++) vector[i]=posicion[6];
  moverServos(vector,velNominal);
  
  while (!salir){   //Mientras que no reciba que se ha pulsado el boton, se queda aqui
      if (BTSerial.available()){
        state=BTSerial.read();
        if (state<=180){  //Si el numero que recibe es menor de 180 es una posicion
          posicion[6]=state;
//Movemos los servos
          SBase.write(posicion[6]);
          SHombro.write(posicion[6]);
          SCodo.write(posicion[6]);
          SMGiro.write(posicion[6]);
          SMSB.write(map(posicion[6],0,180,10,180));
          SPinza.write(map(posicion[6],0,180,40,100));
        }
        else salir=true;  //Si el numero que recibe es mayor de 180 sale de la funcion
      }
  }
  for (int i=0;i<6;i++) posicion[i]=posicion[6];  //indicamos la posicion en la que se encuentra el brazo
}
  
void GuardarSecuencia(){  //Guarda una secuencia en una memoria sin utilizar
  byte Estado=0;  //Estado de la secuencia
  byte Miembro=0; //Servomotor
  byte w; //Numero de la memoria (1,2 o 3)
  byte contador=0;
  
  while(!salir) if(BTSerial.available()) {w=BTSerial.read(); salir=1;}
  salir=0;
  while (Estado<6){
//Lee el vector de posiciones Estado a Estado
    if (BTSerial.available()){  
      state=BTSerial.read();
      if(state>180) break;  //Si se desincroniza con el mando sale al menu
      EEPROM.update(indiceMemoria[w]+contador,state); //Guarda la posicion en la EEPROM
      posicionGuardar[Estado][Miembro]=state; //Guarda la posicion en la matriz
      contador++;    
      if (++Miembro==7){  //Cada numero recibido hace que se pase al siguiente Miembro, cuando se acaben los miembros se pasa de Estado
        Miembro=0;
        Estado++;
      }
    }
  }
 if(state!=255){  //Evita que se de por llena la memoria si se desincroniza con el mando
  EEPROM.write(w,1);
  memoriaVacia[w]=1;
 }
 posicionGuardar[0][6]=velNominal;  //Reescribe la velocidad de la posicion Inicial de la secuencia por la velocidad Nominal
}

void ReescribirSec(){ //Guarda una secuencia en una memoria ya en uso
  byte Estado=0;  //Estado de la secuencia
  byte Miembro=0; //Servomotor
  byte contador=0;
  byte contEscritura=0;
  byte contLectura=0;
  byte w; //Numero de la memoria (1,2 o 3)
  
  while(!salir) if(BTSerial.available()) {w=BTSerial.read(); salir=1;}
  salir=0;
//Guarda la matriz de posiciones a utilizar en la matriz posicionGuardar
  for(int i=0;i<6;i++)
    for(int j=0;j<7;j++){
      posicionGuardar[i][j]=EEPROM.read(indiceMemoria[w]+contLectura);
      contLectura++;
    }
  while (Estado<6){
    //Envia el vector
    for (int i=0;i<7;i++){
          BTSerial.write(posicionGuardar[Estado][i]);
          delay(3);
      }
  contador++;
    //Recibe el vector editado
  while((Estado-contador)){
    if (BTSerial.available()){  
      state=BTSerial.read(); 
      if(state>180) break;  //Si se desincroniza con el mando sale al menu
      EEPROM.update(indiceMemoria[w]+contEscritura,state); //Guarda la posicion en la EEPROM
      posicionGuardar[Estado][Miembro]=state; //Guarda la posicion en la matriz
      contEscritura++;  
      if (++Miembro==7){  //Cada numero recibido hace que se pase al siguiente Miembro, cuando se acaben los miembros se pasa de Estado
        Miembro=0;
        Estado++;
      }
    }
  }
  if(state>180) break;  //Sale si se desincroniza con el mando
 }
 posicionGuardar[0][6]=velNominal;  //Reescribe la velocidad de la posicion Inicial de la secuencia por la velocidad Nominal
}

void BorrarSec(){ //"Borra" una memoria de secuencia
  byte w; //Memoria a borrar
  
  while(!salir) if(BTSerial.available()) {w=BTSerial.read(); salir=1;}
  salir=0;
  EEPROM.write(w,0);  //Escribe 0 en la memoria donde indica si se usa o no una memoria
  memoriaVacia[w]=0;
}

void IniciarSecuencia(){  //Realiza una secuencia
  byte vector[6];
  byte velocidad;
  byte w;   //Secuencia que se realiza (1, 2 o 3)
  int contador=0;

//Saca de la EEPROM la Secuencia a realizar
  for (int i=0;i<6;i++){
    for (int j=0;j<7;j++) {
      posicionGuardar[i][j]=EEPROM.read(indiceMemoria[w]+contador);
      contador++;
    }
  }
//Realiza la Secuencia
  for (int k=0;k<6;k++){
    for (int j=0;j<6;j++) vector[j]=posicionGuardar[k][j];  //Coje las posiciones del Estado
    velocidad=posicionGuardar[k][6];
    moverServos(vector,velocidad);
  }
  BTSerial.write(1);  //Indi ca que ha terminado
  while(!salir) if (BTSerial.available()) salir=BTSerial.read();
//Envia guarda y envia la posicion de finalizacion
  for (int j=0;j<6;j++) {
    posicion[j]=vector[j];
    BTSerial.write(posicion[j]);
    delay(1);
    Serial.println(vector[j]);
  }
  salir=false;
}

void Espera(){  //Modo de inactividad
  byte vector[6]={50,170,180,0,0,40}; //Posicion de espera
  moverServos(vector,20);
  while(!salir) if(BTSerial.available()) salir=BTSerial.read(); //Detecta nueva actividad
  moverServos(PosIn,90);
}

void Desconectado(){  //Enlaza el mando con el brazo
  byte enlazado=0;
  byte i=0;
  
  while(enlazado!=255) if (BTSerial.available()) enlazado=BTSerial.read(); //Se queda esperando un 255
  BTSerial.write(255);  //Si se enlaza envia 255
  delay(10);
//Envia el estado de uso de las memorias de Secuencias
  for(int i=0;i<3;i++) {BTSerial.write(memoriaVacia[i]); delay(1);}
//Recibe la posicion actual del brazo segun el mando
  while(!salir) 
    if(BTSerial.available()){
      posicion[i]=BTSerial.read();
      if(++i==7) {salir=1; i=0;}
    }
  salir=0;
//Escribe la posicion
  SBase.write(posicion[0]);
  SHombro.write(posicion[1]);
  SCodo.write(posicion[2]);
  SMGiro.write(posicion[3]);
  SMSB.write(map(posicion[4],0,180,10,180));
  SPinza.write(map(posicion[5],0,180,40,100));
  }

//Mueve todos los servos simultaneamente desde la posicion actual hasta la indicada a una velocidad
void moverServos(byte hasta[],byte vel){  
  while(!compararArray(posicion, hasta)){ //Mientras la posicion actual y final no sean iguales:
    for (int i=0; i<6;i++){
      if (posicion[i]!=hasta[i]){
        if (posicion[i]-hasta[i]<0)  posicion[i]++;
        if (posicion[i]-hasta[i]>0)  posicion[i]--;
        switch (i){ //Va realizando la escritura de cada servo con cada pasada
          case 0: SBase.write(posicion[i]);  break;
          case 1: SHombro.write(posicion[i]);  break;
          case 2: SCodo.write(posicion[i]);  break;
          case 3: SMGiro.write(posicion[i]); break;
          case 4: SMSB.write(map(posicion[i],0,180,10,180)); break;
          case 5: SPinza.write(map(posicion[i],0,180,40,100));  break;
        }
      }
      //La velocidad se establece con la espera entre cada incremento/decremento (max 5ms, min 10us)
      delayMicroseconds(map(vel,10,100,5000,10)); 
   }
 }
} 

boolean compararArray(byte array1[],byte array2[]){ //Comprueba si los 6 primeros elementos de dos vectores son iguales
 for (int j=0;j<6;j++)
    if(array1[j] != array2[j])return(false);
 return(true);
}
