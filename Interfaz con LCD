////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////// Control de Brazo robot // Mando ////////////// By Arturo//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Objetivo: Este programa sirve para controlar via BlueTooth el Brazo Robot
 * Funcionamiento: Primero nos encontraremos con un menu donde puedes pasar de un modo a otro moviendo el Joystick a la derecha e
 *    izquierda. Para seleccionnar el modo, lo buscamos en el menu y pulsamos el Joystick, hecho se iniciar치 el modo seleccionado.
 *    Subir y bajar el Joystick sirve para variar la posicion en algunos modos.
 *    Para salir de un modo de Control, pulsar de nuevo el Joystick.
 *  
 *  Conexiones:
 *              LCD_I2C                     Joystick                HC 06
 *                    SCL -> Pin A5               VRx -> Pin A1         TXD -> 2
 *                    SDA -> Pin A4               VRy -> Pin A0         RXD -> R -> 3
 *                                                SW  -> Pin 4
 */


#include <Wire.h>               //Biblioteca para I2C
#include <LiquidCrystal_I2C.h>  //Biblioteca para LCD con I2C
#include <SoftwareSerial.h>     //Conexi칩n Serial para el Bluetooth

SoftwareSerial BTSerial(2, 3); // RX | TX

LiquidCrystal_I2C lcd(0x27, 16, 2); //Configuramos la LCD

#define ejeX A1
#define ejeY A0
#define boton 4

bool B;
bool ValorBoton;
bool Ejecutando;
bool ControlTotal;
bool Z;
bool salir;

byte posicion[7]={0,10,120,10,60,4,0};//Posicion de Control
byte state; //Numero del modo en el que se encuentra
byte v;


const char *Texto[7]={"Posicion Inicial","Coger Caja      ","Reposo          ","Control Total   ","Control Manual  ","GuardarSecuencia","RepetirSecuencia"};  //Modos de funcionamiento
const char *Miembro[6]={"Base            ","Hombro          ","Codo            ","M. Giro         ","M. Subir Bajar  ","Pinza           "};
const char *textoAux; //Puntero auxiliar
const char *textoAux2; //Puntero auxiliar

void setup() {
  pinMode(boton,INPUT_PULLUP);
  Serial.begin(9600);
  BTSerial.begin(9600); //Comenzamos la conexion BT a una velocidad de 9600 Baudios

  //Iniciamos la LCD
  lcd.begin();
  lcd.backlight();
  lcd.setCursor(0,0);
  lcd.print(Texto[0]);
}

void loop() {
//Menu
  if (!Ejecutando){
    MenuModo();
  }

//Posicion Inicial o Coger Caja
  if (Ejecutando && (state<2 | state==6)){  
    BTSerial.write(state+200);
    while (salir==false) {
      Cargando(); 
    }
    lcd.setCursor(0,1);
    lcd.print("             ");
    Iniciar();
    salir=false;
  }

//Reposo
  if (Ejecutando && state==2){  
    BTSerial.write(state+200);
    while (salir==false) {
      Cargando(); 
    }
    lcd.setCursor(0,1);
    lcd.print("             ");
    while (Ejecutando) Reposo(); //Se ejecuta el ControlTotal hasta que se pulse el Joystick
    while (!digitalRead(boton)); //Elimina falsos positicos del boton
  }

//Control Total
  if (Ejecutando && state==3){  
    BTSerial.write(state+200);
    while (Ejecutando) {ControlTotal=1; Control();} //Se ejecuta el ControlTotal hasta que se pulse el Joystick
  }

//Control Manual
  if (Ejecutando && state==4){  
    BTSerial.write(state+200);
    //Imprime el menu de ControlManual
    lcd.setCursor(0,0);
    lcd.print(Miembro[v]);
    while (Ejecutando) Control(); //Se ejecuta el ControlManual hasta que se pulse el Joystick
  }
}

 void MenuModo(){ //escribe en la LCD el Modo en el que se encuentra
  if (!digitalRead(boton)) B=1;
  if (B==1 && digitalRead(boton) && !Ejecutando) {
    Ejecutando=1;
    B=0;
  }
  
  if(analogRead(ejeX)>=900){  //Cuando mueves el Joystick a la derecha se mueve a un estado anterior
    textoAux2=Texto[state];
    if (state--==0) state=sizeof(Texto)/2-1;  //Si state es 0, se pone en el valor m치ximo del vector Modo, sino, reduce su valor
    textoAux=Texto[state];              //Guarda el texto del modo en el que esta para editarlo
    //Mueve el texto hacia la derecha
    for (int i=0;i<=16;i++){
      lcd.setCursor(i,0);
      lcd.print(textoAux2);
      lcd.setCursor(i-1,0);
      lcd.print(textoAux[i-1]);
      delay(10);
     }
  }
  
  if(analogRead(ejeX)<=124){  //Cuando mueves el Joystick a la izquierda se mueve a un estado posterior
    if (++state==(sizeof(Texto)/2)) state=0;  //Si state es el maximo, le da valor 0, sino, reduce aumenta su valor
    //Mueve el texto hacia la izquierda
    for (int i=16;i>=0;i--){
      lcd.setCursor(i,0);
      lcd.print(Texto[state]);
      delay(10);
    }
  }
 }
 
 void Control(){
  if(!ControlTotal){ //Control Manual
    if(analogRead(ejeX)>=900){  //Cuando mueves el Joystick a la derecha se mueve a un estado anterior
      if (v--==0) v=5;
    lcd.setCursor(0,0);
    lcd.print(Miembro[v]);
    BTSerial.write(v+181);
    while (analogRead(ejeX)>900) {}
    }
  
   if(analogRead(ejeX)<=124){ //Cuando mueves el Joystick a la derecha se mueve a un estado anterior
      if (++v==6) v=0;
    lcd.setCursor(0,0);
    lcd.print(Miembro[v]);
    BTSerial.write(v+181);
    while (analogRead(ejeX)<124) {}
    }
  }
  if (ControlTotal) v=6;  //Control Total
  char ss[20];
  //Aumenta o Disminuye la posicion
  lcd.setCursor(0,1);
  lcd.print("Posicion: ");
  sprintf(ss,"%03i",posicion[v]);  //Pasamos la distancia a 3 digitos fijos
  lcd.print(ss);
  while(analogRead(ejeY)>=562 && posicion[v]<180) AumentarY();
  while(analogRead(ejeY)<=462 && posicion[v]>0) DisminuirY();

  //Sale de ControlManual
  if (!digitalRead(boton)) B=1;
  if (B==1 && digitalRead(boton)){
    ControlTotal=0;
    v=0;
    Iniciar();
    BTSerial.write(255); //Para que salga al menu el otro arduino
  }
}

 void Reposo(){
  unsigned long tiempo;
  //Escribe ZzZzZzZzZ
  lcd.setCursor(0,1);
  for (int i=0;i<16;i++){
    if (Z) lcd.print("Z");
    else lcd.print("z");
    tiempo=millis();

    //Est치 atento al boton
    while(millis()<tiempo+1000 ){
      if (!digitalRead(boton)) B=1;
      if (B==1 && digitalRead(boton)){
        break;
      }
    }
    if (B==1 && digitalRead(boton)){
      BTSerial.write(255);
      salir=false;
      Iniciar();
      break;
    }
    
    Z=!Z;
  }
  Z=!Z;
 }

 void Iniciar(){ //Puente entre un modo y el menu inicial
    lcd.setCursor(0,0);
    lcd.print(Texto[state]);
    lcd.setCursor(0,1);
    lcd.print("                ");
    B=0;
    Ejecutando=0;

 }

 void Cargando(){ //Puente entre el menu y un modo
   unsigned long tiempo;
   lcd.setCursor(0,1);
   lcd.print("Ejecutando   ");
   lcd.setCursor(10,1);
    for (byte i=0;i<3;i++){
      tiempo=millis();
      while(millis()<tiempo+200)
        if (BTSerial.available()) salir=BTSerial.read();
        
      lcd.print(".");
      
      tiempo=millis();
      while(millis()<tiempo+200)
        if (BTSerial.available()) salir=BTSerial.read();
   }
 }

 void AumentarY(){  //Aumenta la posicion al levantar el eje Y
  char ss[20];
  int Aux=map(analogRead(ejeY),1023,512,1,8);
  posicion[v]++;
  BTSerial.write(posicion[v]);
  lcd.setCursor(10,1);
  sprintf(ss,"%03i",posicion[v]);  //Pasamos la distancia a 3 digitos fijos
  lcd.print(ss);
  delay(exp(Aux));
 }

  void DisminuirY(){  ////Disminuye la posicion al levantar el eje Y
  char ss[20];
  int Aux=map(analogRead(ejeY),0,512,1,8);
  posicion[v]--;
  BTSerial.write(posicion[v]);
  lcd.setCursor(10,1);
  sprintf(ss,"%03i",posicion[v]);  //Pasamos la distancia a 3 digitos fijos
  lcd.print(ss);
  delay(exp(Aux));
 }
