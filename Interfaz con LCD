///////////////////////////////////// Proyecto de Procesadores Integrados /////////////////////////////////////////////////////////////////////
//////////////////// Control de Brazo robot // Mando ////////////// By Arturo//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Objetivo: Este programa sirve para controlar via BlueTooth el Brazo Robot
 * Funcionamiento: Primero nos encontraremos con un menu donde puedes pasar de un modo a otro moviendo el Joystick a la derecha e
 *    izquierda. Para seleccionnar el modo, lo buscamos en el menu y pulsamos el Joystick, hecho esto se iniciará el modo seleccionado.
 *    Subir y bajar el Joystick sirve para variar la posicion en algunos modos.
 *    Para salir de un modo, pulsar de nuevo el Joystick.
 * Modos:
 *    Posicion Inicial: Coloca el brazo en la posicion de inicio. Si ya esta en el inicio, no hace nada
 *    Saludar: Realiza una secuencia de movimientos parecida a saludar.
 *    Bailar: Realiza dos subsecuencias hasta que se pulsa el boton.
 *    Reposo: El brazo se coloca en una posicion de reposo. Despierta tras pulsar el boton.
 *    Piedra, Papel, Tijera: Realiza Piedra, Papel o Tijera al azar. Pulsar el boton para volver al menu.
 *    Control Manual: Moviendo el joystick a derecha e izquierda podremos ir seleccionando la parte del brazo que deseamos mover y subiendo y bajando
 *      cambiaremos la posicion de la parte sobre la que estemos en tiempo real.
 *    Control Total: Este modo es similar al anterior, solo que el brazo se movera simultaneamente a la posicion indicada.
 *    Secuencia: Tenemos acceso a 3 memorias distintas. Pulsando editamos esa memoria. Si esta vacia podremos guardar una secuencia desde la posicion
 *      actual, si esta lleno podremos editar la que esta guardada. Subiendo el joystick ejecutamos la secuencia, bajandolo la borramos.
 *    Reconectar: SI se pierde la conexion con el brazo, realizar esta accion para reconectarlos sin problemas.
 *  Conexiones:
 *              LCD_I2C                     Joystick                HC 06
 *                    SCL -> Pin A5               VRx -> Pin A1         TXD -> 2
 *                    SDA -> Pin A4               VRy -> Pin A0         RXD -> R -> 3
 *                                                SW  -> Pin 4
 */


#include <Wire.h>               //Biblioteca para I2C
#include <LiquidCrystal_I2C.h>  //Biblioteca para LCD con I2C
#include <SoftwareSerial.h>     //Conexión Serial para el Bluetooth

SoftwareSerial BTSerial(2, 3); // RX | TX

LiquidCrystal_I2C lcd(0x27, 16, 2); //Configuramos la LCD

const int ejeX=A0;
const int ejeY=A1;
const int boton=4;

bool memoriaVacia[3]; //Indicadores de que memorias de secuancias están vacias
bool B; //Variable auxiliar para el boton
bool Ejecutando;  //Indica si se esta ejecutando algun modo
bool ControlTotal;  //Diferencia entre Control Total y Manual
bool Z; //Variable auxiliar para Reposo
bool salir; //Indica que se debe salir del modo en el que se encuentre

byte posicion[7]={90,140,170,30,60,180,90};//Posicion del brazo
byte posicionAux[7]={0,0,0,0,0,0,60};//Posicion del auxiliar
byte state; //Numero del modo en el que se encuentra
byte v;   //Variable auxiliar para Control y Guardar Secuencia
byte vv;  //Variable auxiliar para Guardar Secuencia
byte lado=8;  //Variable para el menu de borrar o iniciar secuencias

unsigned int t;   //Mide el tiempo de inactividad para el reposo

const byte PosIn[6]={90,140,170,30,60,180}; //Posicion Inicial
const char *Texto[9]={"Posicion Inicial","Reconectar      ","Secuencia       ","Control Total   ","Control Manual  ","Piedra,Papel,Tij","Reposo          ","Bailar          ","Saludar         "};  //Modos de funcionamiento
const char *Miembro[7]={"Base            ","Hombro          ","Codo            ","M. Giro         ","M. Sub Baj      ","Pinza           ","Velocidad       "};  //Miembros del brazo
const char *MenuGuardar[6]={"Inicio:     ","Etapa1:     ","Etapa2:      ","Etapa3:      ","Etapa4:      ","Final:       "}; //Etapas del guardado de secuencias
const char *MenuSecuencia[4]={"Memoria 1  ","Memoria 2  ","Memoria 3  ","Salir           "};  //Menu de Secuencias
const char *textoAux; //Puntero auxiliar
const char *textoAux2; //Puntero auxiliar


void setup() {
  pinMode(boton,INPUT_PULLUP);  //Iniciamos el boton con resistencia de Pull-Up
  BTSerial.begin(9600); //Comenzamos la conexion BT a una velocidad de 9600 Baudios
  //Iniciamos la LCD
  lcd.begin();
  lcd.backlight();
  Conectar(); //Conectamos con el brazo
  lcd.setCursor(0,0);
  lcd.print(Texto[0]);
  lcd.setCursor(0,1);
  lcd.print("                ");
  t=millis()/1000;
}

void loop() {
//Si pasan 120s sin que entre en ningun modo, entra en reposo
  if (millis()/1000>t+120){
    Espera();
  }
  
//Menu
  if (!Ejecutando){
    MenuModo();
  }

//Posicion Inicial o Saludar
  if (Ejecutando && (state==0 | state==8)){ 
    if (state==0 && compararArray(posicion,PosIn)==true){ //Si se inicia Posicion Inicial y ya esta en la posicion Inicial
      lcd.setCursor(0,1);
      lcd.print("Ya esta en PosIn");
      delay(1500);
      Iniciar();
    }
    else {
      BTSerial.write(state+200);
      while (!salir)  Cargando(); //Espera a que llegue a su posicion

      for (int i=0;i<6;i++) posicion[i]=PosIn[i]; //Indica que la posicion al final sera la posicion Inicial si no es IniciarSecuencia
      lcd.setCursor(0,1);
      lcd.print("             ");
      Iniciar();
      salir=false;
    }
  }

//Bailar
  if (Ejecutando && state==7){ 
    BTSerial.write(state+200);
    while(Ejecutando) Bailar(); //Mientras no se pulsa el boton, baila
    while(!salir) Cargando();   //Vuelve a su posicion
    Iniciar();
    for (int i=0; i<6; i++) posicion[i]=PosIn[i];
    salir=false;
  }
  
//Reposo
  if (Ejecutando && state==6){  
    BTSerial.write(state+200);
    while (!salir)  Cargando(); //Espera mientras se situa en la posicion de reposo 
    lcd.setCursor(0,1);
    lcd.print("                ");
    while (Ejecutando) Reposo(); //Se ejecuta la escritura de ZzZzZz... hasta que se pulse el Joystick
    salir=false;
    for (int i=0;i<6;i++) posicion[i]=PosIn[i]; //Indica que la posicion al salir de esta funcion sera la posicion Inicial
    //Mientras vuelve a su posicion:
    lcd.setCursor(0,0);
    lcd.print("Despertando     ");
    lcd.setCursor(0,1);
    lcd.print("Buenos Dias  :D ");
    while (!salir)  if (BTSerial.available()) salir=BTSerial.read();  //Espera a recibir que está en la posicion
    salir=false;
    Iniciar();
  }

//Piedra,Papel,Tijera
  if (Ejecutando && state==5){ 
    BTSerial.write(state+200);
    for (int i=0;i<6;i++) posicion[i]=PosIn[i]; //Indica q tras realizar esta accion la posicion sera la posicion Inicial
    PPT();  //Realiza Piedra, Papel o Tijera
    salir=false;
    delay(2000);
    while (!salir)  Cargando(); //Espera mientras se coloca en la posicion Inicial
    lcd.setCursor(0,1);
    lcd.print("                ");
    salir=false;
    Iniciar();
  }
//Control Manual
  if (Ejecutando && state==4){  
    BTSerial.write(state+200);
    //Imprime el menu de ControlManual
    lcd.setCursor(0,0);
    lcd.print(Miembro[v]);
    while (Ejecutando) Control(); //Se ejecuta el ControlManual hasta que se pulse el Joystick
  }
  
//Control Total
  if (Ejecutando && state==3){  
    BTSerial.write(state+200);
    while (Ejecutando) {ControlTotal=1; Control();} //Se ejecuta el ControlTotal hasta que se pulse el Joystick
    for (int i=0; i<6; i++) posicion[i]=posicion[6];  //Guarda la posicion actual en posicion
  }

//Secuencia
  if (Ejecutando && state==2){  
    //Imprime el menu de ControlManual
    lcd.setCursor(0,1);
    lcd.print(MenuSecuencia[0]);
    if (memoriaVacia[0]) lcd.print("Llena");
    if (!memoriaVacia[0]) lcd.print("Vacia");
    Secuencia(); //Se ejecuta Secuencia
  }

//Reconectar
  if (Ejecutando && state==1){
    Conectar();
    Iniciar();
  }
}

 void MenuModo(){ //escribe en la LCD el Modo en el que se encuentra
  if (!digitalRead(boton)) B=1;
  if (B==1 && digitalRead(boton) && !Ejecutando) {
    Ejecutando=1;
    B=0;
  }
  
  if(analogRead(ejeX)<=124){  //Cuando mueves el Joystick a la derecha se mueve a un estado anterior
    textoAux2=Texto[state];
    if (state--==0) state=sizeof(Texto)/2-1;  //Si state es 0, se pone en el valor máximo del vector Modo, sino, reduce su valor
    textoAux=Texto[state];              //Guarda el texto del modo en el que esta para editarlo
    //Mueve el texto hacia la derecha
    for (int i=0;i<=16;i++){
      lcd.setCursor(i,0);
      lcd.print(textoAux2);
      lcd.setCursor(i-1,0);
      lcd.print(textoAux[i-1]);
      delay(10);
     }
     t=millis()/1000; //Reinicia el tiempo para entrar en Espera
  }
  
  if(analogRead(ejeX)>=900){  //Cuando mueves el Joystick a la izquierda se mueve a un estado posterior
    if (++state==(sizeof(Texto)/2)) state=0;  //Si state es el maximo, le da valor 0, sino, reduce aumenta su valor
    //Mueve el texto hacia la izquierda
      for (int i=16;i>=0;i--){
        lcd.setCursor(i,0);
        lcd.print(Texto[state]);
        delay(10);
      }
      t=millis()/1000;  //Reinicia el tiempo para entrar en Espera
    }
 }

 void Bailar(){
  unsigned long tiempo;
//Mientras no se pulsa el boton cada 500ms mueve los parentesis
  while(!salir){
    lcd.setCursor(0,1);
    lcd.print("()()()()()()()()");
    tiempo=millis();
    //Espera 500ms
    tiempo=millis();
    while(millis()<tiempo+500){
      if (!digitalRead(boton)) B=1;   //Si se pulsa el boton sale
        if (B==1 && digitalRead(boton)){
          BTSerial.write(255);
          salir=true;
          break;
        }
    } 
    lcd.setCursor(0,1);
    lcd.print(")()()()()()()()(");
    //Espera 500ms
    tiempo=millis();
    while(millis()<tiempo+500){
      if (!digitalRead(boton)) B=1; //Si se pulsa el boton sale
        if (B==1 && digitalRead(boton)){
          BTSerial.write(255);
          salir=true;
          Iniciar();
          break;
        }
    }
  }
  salir=false;
 }

 void Reposo(){
  unsigned long tiempo;
  
  lcd.setCursor(0,1);
  lcd.print("                ");
  while (Ejecutando) {
//Escribe ZzZzZzZzZ
    lcd.setCursor(0,1);
    for (int i=0;i<16;i++){
      if (Z) lcd.print("Z");
      else lcd.print("z");
      tiempo=millis();

//Está atento al boton
      while(millis()<tiempo+1000 ){
        if (!digitalRead(boton)) B=1;
        if (B==1 && digitalRead(boton)){
          break;
        }
      }
      if (B==1 && digitalRead(boton)){
        BTSerial.write(255);
        salir=false;
        Iniciar();
        break;
      } 
      Z=!Z;
    }
    Z=!Z;
  }
}

 void PPT(){
  byte aleatorio=0;
  lcd.setCursor(0,0);
  lcd.print("                ");
  lcd.setCursor(0,0);
//Escribe 3 tras el primer movimiento del brazo
  while (!salir)  if (BTSerial.available()) salir=BTSerial.read();
  salir=false;
  lcd.print("3   ");
//Escribe 2 tras el segundo movimiento del brazo
  while (!salir)  if (BTSerial.available()) salir=BTSerial.read();
  salir=false;
  lcd.print("2   ");
//Escribe 1 tras el tercer movimiento del brazo
  while (!salir)  if (BTSerial.available()) salir=BTSerial.read();
  salir=false;
  lcd.print("1   ");
  lcd.setCursor(0,1);
//Lee el valor de aleatorio, si es 1 ejecuta Piedra, si es 2 ejecuta Papel, si es 3 Ejecuta Tijera
  while (!aleatorio)  if (BTSerial.available()) aleatorio=BTSerial.read();
  if (aleatorio==1) lcd.print("Piedra!!");
  if (aleatorio==2) lcd.print("Papel!!");
  if (aleatorio==3) lcd.print("Tijera!!");
  while (!salir)  if (BTSerial.available()) salir=BTSerial.read();  //Espera a que termine el movimiento
  salir=false;
 }
 
 void Control(){
  if(!ControlTotal){ //Control Manual
    if(analogRead(ejeX)>=900){  //Cuando mueves el Joystick a la derecha se mueve a un estado anterior
      if (v--==0) v=5;
    lcd.setCursor(0,0);
    lcd.print(Miembro[v]);
    BTSerial.write(v+181);
    while (analogRead(ejeX)>=900) {}
    }
  
    if(analogRead(ejeX)<=124){ //Cuando mueves el Joystick a la derecha se mueve a un estado anterior
        if (++v==6) v=0;
      lcd.setCursor(0,0);
      lcd.print(Miembro[v]);
      BTSerial.write(v+181);
      while (analogRead(ejeX)<=124) {}
      }
  }
  if (ControlTotal) v=6;  //Control Total usa el elemento 6 el vector de posicion
  char ss[20];
  //Aumenta o Disminuye la posicion
  lcd.setCursor(0,1);
  lcd.print("Posicion: ");
  sprintf(ss,"%03i",posicion[v]);  //Pasamos la distancia a 3 digitos fijos
  lcd.print(ss);
  while(analogRead(ejeY)>=570 && posicion[v]>0) DisminuirY(posicion,10);
  while(analogRead(ejeY)<=462 && posicion[v]<180) AumentarY(posicion,10);

  //Sale de ControlManual
  if (!digitalRead(boton)) B=1;
  if (B==1 && digitalRead(boton)){
    ControlTotal=0;
    v=0;
    Iniciar();
    BTSerial.write(255); //Para que salga al menu el otro arduino
  }
}

 void Secuencia(){
  byte w=0;
  byte miembro=0;
  
  while(Ejecutando){
   if(analogRead(ejeX)>=900){  //Cuando mueves el Joystick a la izquierda se mueve a un estado anterior
     if (w--==0) w=3;
     lcd.setCursor(0,1);
     lcd.print(MenuSecuencia[w]);
     if (w<3 && memoriaVacia[w]) lcd.print("Llena");
     if (w<3 && !memoriaVacia[w]) lcd.print("Vacia");
     while (analogRead(ejeX)>=900) {}
   }
   if(analogRead(ejeX)<=124){ //Cuando mueves el Joystick a la derecha se mueve a un estado anterior
      if (++w==4) w=0;
      lcd.setCursor(0,1);
      lcd.print(MenuSecuencia[w]);
      if (w<3 && memoriaVacia[w]) lcd.print("Llena");
      if (w<3 && !memoriaVacia[w]) lcd.print("Vacia");
      while (analogRead(ejeX)<=124) {}
    }
//Si se pulsa el boton sobre Salir sale al menu general
    if (!digitalRead(boton)) B=1;
    if (B==1 && digitalRead(boton)){
      if (w==3) Iniciar();
//Crear secuencia
      else {
        Guardar(w);
        memoriaVacia[w]=1;  //Indica que esa memoria esta en uso
        //Vuelve a escribir el menu
        lcd.setCursor(0,0);
        lcd.print(Texto[2]);
        lcd.setCursor(0,1);
        lcd.print(MenuSecuencia[w]);
        lcd.print("Llena");
      }
    }

//Menu para borrar secuencia
    if(analogRead(ejeY)>=900 && memoriaVacia[w] && w<3){ //Si se baja el JT y esta sobre una memoria llena
      TextoSecuencia("Borrar secuencia");
      if (!lado && B) {
        BTSerial.write(221);
        delay(1);
        BTSerial.write(w);
        memoriaVacia[w]=0;
        
      }
      lcd.setCursor(0,0);
      lcd.print(Texto[2]);
      lcd.setCursor(0,1);
      lcd.print(MenuSecuencia[w]);
      if (w<3 && memoriaVacia[w]) lcd.print("Llena");
      if (w<3 && !memoriaVacia[w]) lcd.print("Vacia");
      B=0;
      lado=8;
    }
//Menu para Iniciar secuencia
    if(analogRead(ejeY)<=124 && memoriaVacia[w] && w<3){ //Si se sube el JT y esta sobre una memoria llena
      TextoSecuencia("Inicia secuencia");
      if (!lado && B) {
        BTSerial.write(201);
        delay(10);
        BTSerial.write(w);
        while (!salir)  Cargando(); //Espera a que llegue a su posicion
        salir=false;

        miembro=0;
        BTSerial.write(1);
        while(!salir) 
          if(BTSerial.available()){
            posicion[miembro]=BTSerial.read();
              if(++miembro==6) salir=1;
          }
        salir=false;
      }
      lcd.setCursor(0,0);
      lcd.print(Texto[2]);
      lcd.setCursor(0,1);
      lcd.print(MenuSecuencia[w]);
      if (w<3 && memoriaVacia[w]) lcd.print("Llena");
      if (w<3 && !memoriaVacia[w]) lcd.print("Vacia");
      B=0;
      lado=8;
    }
  }
 }

 void TextoSecuencia(char *texto){  //Menu de seleccion de borrar e iniciar secuencia
    unsigned long tiempo=0;
    
    lcd.setCursor(0,0);
    lcd.print(texto);
    while(!B){
      lcd.setCursor(0,1);
      lcd.print("   Si      No   ");
      tiempo=millis();
      while(millis()<tiempo+400){ //Espera mientras lee si se mueve el JT
        if(analogRead(ejeX)>=900) lado=0;
        if(analogRead(ejeX)<=124) lado=8;
        if (!digitalRead(boton)) B=1;
      }
  //Escribe un cuadrado negro sobre Si o No
      for (int i=2+lado;i<6+lado;i++){
        lcd.setCursor(i,1);
        lcd.write(0);
      }
      tiempo=millis();
      while(millis()<tiempo+200){ //Espera mientras lee si se mueve el JT
        if(analogRead(ejeX)>=900) lado=0;
        if(analogRead(ejeX)<=124) lado=8;
        if (!digitalRead(boton)) B=1; 
      }
      while(!digitalRead(boton)){}    //Evita falsas lecturas del boton
    }
  }

void Guardar(byte w){ 
  bool ejecutando=1;
  byte miembro=0;
  B=0;
  
  if (memoriaVacia[w]) BTSerial.write(220); //Si la memoria esta llena reescribe
  else BTSerial.write(202);    //Si la memoria esta vacia guarda
//Imprime el menu de ControlManual
  lcd.setCursor(0,0);
  lcd.print(MenuGuardar[vv]);
  lcd.setCursor(0,1);
  lcd.print(Miembro[v]);
  BTSerial.write(w);
  if (!memoriaVacia[w]) for (int i=0; i<6;i++) posicionAux[i]=posicion[i];  //Si la memoria esta vacia editas a partir de la posicion inicial
  else while(!salir)  //Si la memoria esta llena editas sobre la posicion guardada antes 
    if(BTSerial.available()){
      posicionAux[miembro]=BTSerial.read();
      if(++miembro==7) {salir=1; miembro=0;}
    }
  salir=false;
  
  while (ejecutando){
    if(analogRead(ejeX)>=900){  //Cuando mueves el Joystick a la derecha se mueve a un estado anterior
      if (v--==0) v=6;
      if (vv==0 && v==6) v=5;
      lcd.setCursor(0,1);
      lcd.print(Miembro[v]);
      while (analogRead(ejeX)>=900) {}
   }
   if(analogRead(ejeX)<=124){ //Cuando mueves el Joystick a la derecha se mueve a un estado anterior
      if (++v==7) v=0;
      if (vv==0 && v>=6) v=0;
      lcd.setCursor(0,1);
      lcd.print(Miembro[v]);
      while (analogRead(ejeX)<=124) {}
    }
    
    //Si se pulsa el boton pasa de etapa envia la etapa que acaba de configurar
    if (!digitalRead(boton)) B=1;
    if (B==1 && digitalRead(boton)){
        vv++;
        for (int i=0;i<7;i++){
          BTSerial.write(posicionAux[i]);
          delay(3);
        }
        if(memoriaVacia[w]) while(!salir) //Si la memoria esta llena recibe el vector guardado antes
          if(BTSerial.available()){
            posicionAux[miembro]=BTSerial.read();
            if(++miembro==7) {salir=1; miembro=0;}
        }
        salir=0;
        lcd.setCursor(0,0);
        lcd.print(MenuGuardar[vv]);
        B=0;
    }
    char ss[20];
    //Aumenta o Disminuye la posicion
    lcd.setCursor(11,1);
    sprintf(ss,"%03i",posicionAux[v]);  //Pasamos la distancia a 3 digitos fijos
    lcd.print(ss);
    if (v==6) { //Si es la velocidad el rango de valores es entre 10 y 100
      lcd.print("%    ");
      while(analogRead(ejeY)>=570 && posicionAux[v]>10) DisminuirY(posicionAux, 11);
      while(analogRead(ejeY)<=462 && posicionAux[v]<100) AumentarY(posicionAux, 11);
    }
    else {  //Si no es velocidad actua normal
      lcd.print("     ");
      while(analogRead(ejeY)>=570 && posicionAux[v]>0) DisminuirY(posicionAux, 11);
      while(analogRead(ejeY)<=462 && posicionAux[v]<180) AumentarY(posicionAux, 11);
    }
    

    //Sale de GuardarSecuencia
    if (!digitalRead(boton) && vv>=5) B=1;
    if (B==1 && digitalRead(boton) && vv>=5){
      for (int i=0;i<7;i++){
          BTSerial.write(posicionAux[i]);
          delay(3);
      }
      v=0;
      vv=0;
      B=0;
      ejecutando=0;
      salir=0;
      t=millis()/1000;
    }
  }
}

 void Espera(){ //Se inicia tras 2min de inactividad
  Ejecutando=1;
  BTSerial.write(253);  //Indica al brazo que se ha entrado en espera
  lcd.setCursor(0,0);
  lcd.print("En espera...    ");
  lcd.setCursor(0,1);
  lcd.print("PulseParaVolver.");
  while(Ejecutando){
    //Si se pulsa el boton o se mueve se sale del modo
    if (abs(analogRead(ejeX)-512)>100) B=1;
    if (abs(analogRead(ejeY)-512)>100) B=1;
    if (!digitalRead(boton)) B=1;
    if (B==1 && digitalRead(boton)){
      Iniciar();
      BTSerial.write(255); //Para que salga al menu el otro arduino
  }
 }
 while(!digitalRead(boton)){} //Evita falsas lecturas del boton
}

 void Conectar(){ //Conecta el mando y el brazo
  unsigned long tiempo;
  byte enlazado=0;
  byte j=0;
  
  lcd.setCursor(0,0);
  lcd.print("Por favor espere");
  lcd.setCursor(0,1);
  lcd.print("Conectando");
  
//Para comprobar si esta concetado manda un 255 cada medio segundo, el otro modulo al recibirlo debe
//mandar otro 255 como respuesta, al recibir el 255 del otro modulo sabemos que estan concetados
  while(enlazado!=255) {
    lcd.setCursor(10,1);
    lcd.print("    ");  //Borra los puntos
    lcd.setCursor(10,1);
    for (int i=0; i<4; i++){
      BTSerial.write(255);  //manda el 255
      tiempo=millis();
      while (millis()<= tiempo+500) {
        if (BTSerial.available()) enlazado=BTSerial.read(); //Comprueba si lo recibe
        if (enlazado==255)  break; //Si lo recibe sale del For
      }
      if (enlazado==255)  break; //Si lo recibe sale del For
      lcd.print(".");
    }
  }
//Recibe que memorias de Secuencias estan en uso
  while(!salir) 
    if(BTSerial.available()){
      memoriaVacia[j]=BTSerial.read();
      if(++j==3) salir=1;
    }
  salir=0;
//Envia la posicion actual
  for (int i=0;i<7;i++){
    BTSerial.write(posicion[i]);
    delay(1);
  }
}

 void Iniciar(){ //Puente entre un modo y el menu inicial
    lcd.setCursor(0,0);
    lcd.print(Texto[state]);
    lcd.setCursor(0,1);
    lcd.print("                ");
    B=0;
    Ejecutando=0;
    t=millis()/1000;  //Reinicia el tiempo para entrar en Espera
 }

 void Cargando(){ //Puente entre el menu y un modo
   unsigned long tiempo;
   lcd.setCursor(0,1);
   lcd.print("Ejecutando    ");
   lcd.setCursor(10,1);
   //Escribe 3 puntos ...
    for (byte i=0;i<4;i++){
      tiempo=millis();
      while(millis()<tiempo+400)  //Mientras espera 400ms, comprueba si ha terminado de cargar
        if (BTSerial.available())salir=BTSerial.read();
      lcd.print(".");
      if(salir) break;
   }
 }

 void AumentarY(byte vector[],byte inicioLCD){  //Aumenta la posicion al levantar el eje Y
  char ss[20];
  float Aux=map(analogRead(ejeY),0,512,1.0,8.0);
  
  vector[v]++;  //Incrementa el vector
  if (state!=2) BTSerial.write(vector[v]);  //Si no se encuentra en el estado de Guardar, envia el numero
  lcd.setCursor(inicioLCD,1); 
  sprintf(ss,"%03i",vector[v]);  //Pasamos la distancia a 3 digitos fijos
  lcd.print(ss);
  if (state==2 && v==6) lcd.print("%"); //Si se encuentra en el estado de guardar, en el factor de la velocidad
  else lcd.print(" ");  //sino, se borra si hubiera un %
  delay(exp(Aux));  //El tiempo de espera entre incrementos es exponencial, cuanto menos se mueve el joystick, mayor es el tiempo de espera entre incrementos
 }

 void DisminuirY(byte vector[], byte inicioLCD){  ////Disminuye la posicion al levantar el eje Y
  char ss[20];
  float Aux=map(analogRead(ejeY),1023,512,1.0,8.0);
  
  vector[v]--;  //Decrementa el vector
  if (state!=2) BTSerial.write(vector[v]);
  lcd.setCursor(inicioLCD,1);
  sprintf(ss,"%03i",vector[v]);  //Pasamos la distancia a 3 digitos fijos
  lcd.print(ss);
  if (state==2 && v==6) lcd.print("%");
  else lcd.print(" ");
  delay(exp(Aux));
 }
 
 boolean compararArray(byte array1[],byte array2[]){  //Comprueba si los 6 primeros elementos de dos vectores son iguales
 for (int j=0;j<6;j++)
    if(array1[j] != array2[j])return(false);
 return(true);
}
